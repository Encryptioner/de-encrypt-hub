{
  "title": "De-encrypt Hub",
  "subtitle": "A versatile, browser-based toolkit for all your encryption, decryption, signing, and hashing needs.",
  "hashing": {
    "SHA-256": "Part of the SHA-2 family, it produces a 256-bit (32-byte) hash. It's a secure standard for data integrity, used in blockchain technology like Bitcoin and for digital signatures.",
    "SHA-512": "Also in the SHA-2 family, but produces a longer 512-bit (64-byte) hash. It's more secure than SHA-256 but slightly slower, often used in systems requiring higher security.",
    "SHA-1": "Warning: SHA-1 is considered insecure. It produces a 160-bit hash and is vulnerable to collision attacks, where two different inputs can produce the same hash. It should not be used for new security applications.",
    "MD5": "Warning: MD5 is broken and cryptographically insecure. It produces a 128-bit hash and suffers from extensive collision vulnerabilities. It should only be used for non-security purposes like checksums to detect unintentional data corruption.",
    "generic": "Hashing is a one-way function that creates a unique, fixed-size fingerprint of data. It's used to verify data integrity, not for encryption."
  },
  "algorithms": [
    {
      "name": "AES",
      "value": "AES",
      "description": "Advanced Encryption Standard - A widely used symmetric encryption algorithm.",
      "principle": "AES operates on 128-bit blocks of data and uses a key that can be 128, 192, or 256 bits. It's an iterative cipher, meaning it applies the same set of transformations, called 'rounds', to the data block. The number of rounds depends on the key length (10, 12, or 14 rounds).",
      "visualizationSteps": [
        {
          "title": "1. State Array Preparation",
          "explanation": "The input text is converted into a 4x4 matrix of bytes, known as the 'state array'. This is the primary data structure that AES manipulates."
        },
        {
          "title": "2. Key Expansion",
          "explanation": "The secret key is expanded into a set of 'round keys'. A different round key is used for each round of encryption to ensure security."
        },
        {
          "title": "3. Initial Round - AddRoundKey",
          "explanation": "The initial state array is combined with the first round key using a bitwise XOR operation. This is the first step of scrambling the data."
        },
        {
          "title": "4. Main Rounds (9 for 128-bit keys)",
          "explanation": "The core of AES. This step is repeated multiple times. Each round consists of four transformations: SubBytes, ShiftRows, MixColumns, and AddRoundKey."
        },
        {
          "title": "4a. SubBytes Transformation",
          "explanation": "Each byte in the state array is substituted with another byte from a lookup table called the 'S-box'. This provides non-linearity to the encryption."
        },
        {
          "title": "4b. ShiftRows Transformation",
          "explanation": "The bytes in each row of the state array are cyclically shifted. This permutation step helps diffuse the data across the block."
        },
        {
          "title": "4c. MixColumns Transformation",
          "explanation": "Each column of the state array is transformed using a mathematical operation over a finite field. This provides further diffusion."
        },
        {
          "title": "4d. AddRoundKey Transformation",
          "explanation": "The state is XORed with the corresponding round key for the current round."
        },
        {
          "title": "5. Final Round",
          "explanation": "The final round is similar to a main round, but it omits the 'MixColumns' step."
        },
        {
          "title": "6. Final Ciphertext",
          "explanation": "After the final round, the state array holds the encrypted data, which is then presented as the final ciphertext."
        }
      ],
      "visualizationStepsDecryption": [
        {
          "title": "1. Initial Round - AddRoundKey",
          "explanation": "The ciphertext is combined with the last round key using XOR. This is the first step in reversing the encryption."
        },
        {
          "title": "2. Main Rounds (Inverse)",
          "explanation": "The core of AES decryption. This step is repeated multiple times, applying the inverse transformations: InvShiftRows, InvSubBytes, AddRoundKey, and InvMixColumns."
        },
        {
          "title": "2a. Inverse ShiftRows",
          "explanation": "The bytes in each row of the state are cyclically shifted back to their original positions, reversing the ShiftRows permutation."
        },
        {
          "title": "2b. Inverse SubBytes",
          "explanation": "Each byte in the state array is substituted with a byte from the inverse S-box lookup table, reversing the non-linear substitution."
        },
        {
          "title": "2c. AddRoundKey",
          "explanation": "The state is XORed with the corresponding round key. The round keys are used in reverse order from the encryption process."
        },
        {
          "title": "2d. Inverse MixColumns",
          "explanation": "Each column is transformed using an inverse mathematical operation to reverse the diffusion provided by MixColumns. This step is skipped in the last round."
        },
        {
          "title": "3. Final Round (Inverse)",
          "explanation": "The final round of decryption includes InvShiftRows, InvSubBytes, and AddRoundKey, but omits the InvMixColumns step."
        },
        {
          "title": "4. Final Plaintext",
          "explanation": "After the final round, the state array holds the original data, which is then presented as the final plaintext."
        }
      ]
    },
    { "name": "DES", "value": "DES", "description": "Data Encryption Standard - An older symmetric-key algorithm.", "principle": "DES is a block cipher that encrypts data in 64-bit blocks. It uses a 56-bit key and goes through 16 rounds of complex operations. It is now considered insecure for most applications due to its small key size." },
    { "name": "TripleDES", "value": "TripleDES", "description": "Triple Data Encryption Algorithm - Applies DES three times.", "principle": "TripleDES applies the Data Encryption Standard (DES) algorithm three times to each data block. It provides a more secure alternative to DES but is slower than more modern ciphers like AES." },
    { "name": "Rabbit", "value": "Rabbit", "description": "A high-performance stream cipher.", "principle": "Rabbit is a stream cipher that is designed for high performance in software. It uses a 128-bit key and a 64-bit initialization vector (IV) to generate a keystream that is XORed with the plaintext." },
    { "name": "RC4", "value": "RC4", "description": "Rivest Cipher 4 - A widely used stream cipher.", "principle": "RC4 is a stream cipher with variable key length. It generates a pseudorandom keystream that is combined with the plaintext using XOR. Note: RC4 has known vulnerabilities and should be used with caution." },
    { "name": "RC4Drop", "value": "RC4Drop", "description": "RC4 with a modified key-scheduling algorithm, dropping initial output.", "principle": "This is a variant of RC4 that discards the initial portion of the keystream to protect against certain attacks. However, it still shares vulnerabilities with the original RC4." }
  ],
  "imageAlgorithms": [
    { "name": "Pixel Scramble", "value": "pixel-scramble", "description": "Shuffles the positions of pixels in the image based on the key. Creates a mosaic effect." },
    { "name": "Color Scramble", "value": "color-scramble", "description": "Swaps the Red, Green, and Blue channels of each pixel based on the key. Distorts colors." },
    { "name": "XOR Cipher", "value": "xor-cipher", "description": "Applies a bitwise XOR operation to each pixel's color values. Creates a noisy, static-like image." }
  ],
  "rsa": {
    "name": "RSA-OAEP",
    "description": "Asymmetric encryption standard using Optimal Asymmetric Encryption Padding.",
    "principle": "RSA encryption relies on the computational difficulty of factoring large prime numbers. A public key is used to encrypt data, and a private key is required to decrypt it. OAEP is a padding scheme used with RSA to add an element of randomness, which prevents several types of attacks and makes it more secure.",
    "encryptionSteps": [
      {
        "title": "1. Import Public Key",
        "explanation": "The provided public key (in JWK format) is imported and prepared for encryption. This key contains the modulus (n) and the public exponent (e)."
      },
      {
        "title": "2. Prepare Message (RSA-OAEP Padding)",
        "explanation": "The plaintext message is encoded and then padded using the Optimal Asymmetric Encryption Padding (OAEP) scheme. This adds randomness and structure to prevent attacks."
      },
      {
        "title": "3. Modular Exponentiation",
        "explanation": "The padded message is converted to a number and raised to the power of the public exponent (e), modulo the modulus (n). This is the core mathematical operation of RSA encryption."
      },
      {
        "title": "4. Final Ciphertext (Base64)",
        "explanation": "The resulting number from the exponentiation is converted into a byte array and then encoded into Base64 format for easy transport."
      }
    ],
    "decryptionSteps": [
      {
        "title": "1. Import Private Key",
        "explanation": "The provided private key (in JWK format) is imported. This key contains the necessary components, including the private exponent (d), to perform decryption."
      },
      {
        "title": "2. Decode Ciphertext",
        "explanation": "The Base64 encoded ciphertext is decoded back into a raw byte array, which represents the encrypted number."
      },
      {
        "title": "3. Modular Exponentiation",
        "explanation": "The encrypted number is raised to the power of the private exponent (d), modulo the modulus (n). This reverses the encryption process."
      },
      {
        "title": "4. Remove Padding & Decode",
        "explanation": "The OAEP padding is removed from the result, revealing the original encoded message. The message is then decoded back to its original text form."
      }
    ]
  },
  "rsa-pss": {
    "principle": "RSA-PSS is a signature scheme that provides stronger security guarantees than older methods like PKCS#1 v1.5. It involves hashing the data and then encrypting that hash with a private key, using a probabilistic padding scheme (PSS) to enhance security."
  },
  "ed25519": {
    "principle": "Ed25519 is a high-speed, high-security digital signature algorithm based on elliptic curve cryptography (ECC) over Curve25519. It provides strong guarantees of authenticity and integrity with short signatures and keys."
  },
  "jwe": {
    "principle": "JSON Web Encryption (JWE) is a standard for securely transmitting data between parties. The content (payload) is encrypted using a secret key, ensuring confidentiality. This implementation uses a key derived from your secret to perform the encryption."
  }
}
